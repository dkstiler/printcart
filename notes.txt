This repository contains most of my work-in-progress stuff I created while doing the printer cartridge hacking.
Proceed at your own risk, no guarantee of code quality of any sort, but perhaps it helps you in whatever
you're trying to do.

 **** The relevant directories: ****

* notes.txt
This file

* waveforms
This contains some tools to interpret wfm files generated by my Rigol scope and either convert them to 
PulseView-compatible csv files, or to decode them into an image.

* check_waveform
Simple waveform generator. Serves a webpage where you can tweak waveforms and send them to the GPIOs. I
used this while I still wasn't certain what the signals did, to try to eke some response from my print
cartridge.

* print_nyancat
Here, I figured out the meaning of the data bits, I just wasn't sure what the timing should be. It again
has a webserver where you can twiddle with the timings, but the timings here are used as a template and the
firmware fills in the data for the image (my Nyancat test image in this case) by itself.

* integrated
The firmware for the prototype PCB with accelerometer, ToF sensors etc. Has a little menu so you can select what 
you want to do. 

* ultrasonic_algo
* ultrasonic_rx
* ultrasonic_tx
Some tests to see if I could make an ultrasonic receiver on the cartridge and a transmitter in a static position
work as a good position detection system. The transmitter sends out a packet over WiFi as well as an ultrasonic
'bleep'; theoretically, because one goes at the speed of light and the other at the speed of sound, the distance
can be determined. I tried a somewhat novel approach (QAM-decoding the incoming pulse to get a precise trigger 
point) to get it to work, but in the end I discarded the idea and went with ToF-sensors instead.

 **** About wfm files ****

Some of the programs that were used to research things parse wfm files. These are files generated by my Rigol
MSO1074 oscilloscope, usually set to the highest sample rate, analog channels 1 and 2 and the 16 LA channels
enabled. The .wfm files, in that case, consist of an (unknown) header, and then for each sample the channel 1 
and 2 analog data as two bytes and the 16-channel LA data as two more bytes.

 **** Cartridge signal names ****

About the names used: All this was written before I knew the 'official' signal names, so the code is full of 
signal names that I thought up. To translate, here's my notes about the pinout, with added official HP
signal names. Note that while the patents and the cartridges themselves show the signal names, I don't have
a reference for the pin numbers and any numbering scheme HP uses probably is different.

Connections to cartridge, looking *into printer*:

----------------------

              10
     01
     02      11
     03 04   12
    05        13
    06
   07          14
09 08          15 16

    (paper here)
-----------------------

Signals. Format is as such:
pin_number: [voltage_if_1] (LA_channel_in_dump) my_name / HP_name (notes)
1: [16V] (9) opt5 latch / S5
2: [9V] (3) noz data cyan /D3
3: [9V] (5) opt data / CSYNC
4: PWRB (1/17) nozzle power A / F5
5: [16V] (8) opt1 / S1 (Color cart: If pin 3 is low here, this indicates that the carriage moves backwards, inverting the bit->nozzle mapping)
6: [16V] (7) opt4 / S4 (something lower latch)
7: [16V] (6) opt2 / S2 (something upper latch)
8: N/C? / ID (Goes somewhere on-die, connected with ?caps?)
9: ground
10: [16V] (11) opt3 latch / S3
11: [16V] (10) noz clk / DCLK
12: [9V] (4) noz data yellow / D1
13: Temp sensor, connected to ground. (70'ish ohm at 20c) /TS
14: [9V] (2) noz data magenta / D2
15: PWRA (0/16) nozzle power A / F3
16: ground

PWRA pulses if any of the 1st 4 CMY lines are low for a byte
PWRB pulses if any of the 2nd 4 CMY lines are low for a byte

